compilationUnit
    : declarations*
    ;

declarations
    : includeDeclaration
    | classDeclaration
    | protocolDeclaration
    | implementClassDeclaration
    | methodImplementation
    ;

//
// includeDeclaration
//
includeDeclaration
    : 'include' STRING 
    ;

//
// classDeclaration
//
classDeclaration
    : scopeSpecifier ? classSignature 'class' identifer (classInheritDeclaration)?(protoclImplementDeclaration)? classBlock
    ;
    
classSignature
    : 'final'
    | 'abstract'
    ;

classInheritDeclaration
    : 'extend' identifer (',' identifer)*
    ;
    
protocolImplemenDeclaration
    : 'implements' IDENTIFIER (',' IDENTIFIER)*
    ;

classBlock
    : '{' classMember* '}'
    ;

classMember
    : classVarDeclaration 
    | classMethodDeclaration
    ;

classVarDeclaration
    : scopeSpecifier? varDeclaration ';'
    ;

classMethodDeclaration
    : scopeSepcifier? methodDeclaration
    ;
//
// implementClassDeclaration
// if implement class className is specified, the methods and variables following
// the statement will be member of the class, untill another implment declaration or
// file end marker is found
//
implementClassDeclaration
    : 'implement' IDENTIFIER 
    ;


scopeSpecifier
    : 'public' | 'private'
    ;

storageSpecifier
    : 'static'
    ;

typeSpecifier 
    : basicType
    | IDENTIFIER // custome type, such as struct, class
    | setType
    | mapType
    ;
    
basicType
    : 'bool'
    | 'string'
    | 'int'
    | 'float'
    | 'id'
    ;
    
mapType
    : 'map' '<'basicType, basicType '>' 
    ;
setType
    : 'set' '<'basicType '>'
    ;
    
//
// varDeclaration
//

varDeclaration
    : storageSpecifier? constSpecifier?  typeSpecifier IDENTIFIER  ('=' expression)? ';'
    ;
storageSpecifier
    : 'static'
    ;
constSpecifier
    : 'const'
    ;

//
// methodDeclaration
//
methodDeclaration
    : storageSpecifier? constSpecifier? methodReturnType IDENTIFIER formalParameterList ';'
    ;

methodImplementation
    : storageSpecifier? constSpecifier? methodReturnType IDENTIIFER formalParameterList methodBlock
    ;

formalParameterList
    : '('')'
    | '(' normalFormalParameters (',' defaultFormalParameters)? ')'
    ;

normalFormalParameters
    : normalFormalParameter (',' normalFormalParameter)*
    ;
normalFormalParameter
    : constSpecifier? typeSpecifier IDENTIFIER 
    ;

defaultFormalParameters
    : defaultFormalParameter (',' defaultFormalParameter)*
    ;

defaultFormalParameter
    : normalFormalParameter ('=' expression)?
    ;


constSpecifier
    : 'const'
    ;

methodBlock
    : '{' statement* '}'
    ;


//
// protocolDeclaration
//
protocolDeclaration
    : scopeSpecifier? 'protocol' identifer protocolBlock
    ;

protocolBlock
    : '{' protocolMethodDeclaration+ '}'
    ;

protocolMethodDeclaration
    : methodReturnType IDENTIFIER formalParameterList ';'
    ;

methodReturnType
    : typeSpecifier
    | 'void'
    ;
//
// statements
//
statements
    : statement*
    ;

statement
    : blockStatement
    | varDeclStatement
    | ifStatement
    | forStatement
    | foreachStatement
    | doStatement
    | whileStatement
    | returnStatement
    | tryStatement
    | throwStatement
    | breakStatement
    | assertStatement
    | newStatement
    | expressionStatement
    | methodCallStatement
    ;

// blockStatement
blockStatement
    : '{' statement* '}'
    ;

// varDeclStatement
varDeclStatement
    : varDeclaration ';'
    ;

// ifStatement
ifStatement
    : 'if' '(' expression ')' blockStatement ('else' blockStatement)?
    ;

// forStatement
forStatement
    : 'for' '('expression? ';' expression? ';' expressionList? ')' blockStatement
    ;

// foreachStatement    
foreachStatement
    : 'foreach' '(' foreachVarItem (',' foreachVarItem)? 'in' foreachSetObject ')' blockStatement
    ;

// foreachVarItem
foreachVarItem
     : typeSpecifier? IDENTIFIER
     ;
// foreachSetObject
foreachSetObject
    : IDENTIFIER
    | mapLiteral
    | setLiteral
    ;

// whileStatement
whileStatement
    : 'while' '(' expression ')' blockStatement
    ;

// doStatement
doStatement
    : 'do' blockStatement 'while' '(' expression ')'
    ;

// switchStatement
switchStatement
    : 'switch' '(' expression ')' '{' switchCase*defaultCase? '}'
    ;

switchCase
    : ('case' expression ':')+ statement
    ;

defaultCase
    : 'default' ':' statement
    ;

// returnStatement
returnStatement
    : 'return' expression? ';'
    ;

// breakStatement
breakStatement
    : 'break' ';'
    ;

// continueStatement
continueStatement
    : 'continue' ';'
    ;

// assertStatement
assertStatement
    : 'assert' '(' conditionalExpr ')' ';'
    ;

// throwStatement
throwStatement
    : 'throw' expression? ';'
    ;


// tryStatement
tryStatement
    : 'try' blockStatement catchParts? finallyPart?
    ;

catchParts
    : catchParts*
    ;
catchPart
    : 'catch' '('typeSpecifier IDENTIFIER ')'  blockStatement
    ;

finallyPart
    : 'finally' blockStatement
    ;


// expressionStatement
expressionStatement
    : expression? ';'
    ;


//
// expr
//
exprList
    : expression (',' expression)*
    ;

expression
    : assignableExpr assigmentOperator expression
    | conditionalExpr
    | newExpr
    ;

newExpr
    : 'new' typeSpecifier arguments
    ;

assignableExpr
    : primary (arguments assignableSelector)+
    | IDENTIFIER
    ;

// assignmentOperator
assignmentOperator
    : '='
    | '+='
    | '-='
    | '*='
    | '/='
    | '<<='
    | '>>='
    | '&='
    | '|='
    | '^='
    | '~='
    ;

    
conditionalExpr
    : logicalOrExpr 
    ;

logicalOrExpr
    : logicalAndExpr ('||' logicalAndExpr)*
    ;

logicalAndExpr
    : bitwiseOrExpr ('&&' bitwiseOrExpr)*
    ;

bitwiseOrExpr
    : bitwiseXorExpr ('|' bitwiseXorExpr)*
    ;

bitwiseXorExpr
    : bitwiseAndExpr ('^' bitwiseAndExpr)*
    ;

bitwiseAndExpr
    : equalityExpr ('&' equalityExpr)*
    ;

equlityOperator
    : '=='
    | '!='
    ;

equalityExpr
    : relationalExpr (equalityOperator relationalExpr)*
    ;
relationalOperator
    : '>='
    | '<='
    | '>'
    | '<'
    ;

relationalExpr
    : shiftExpr (relationalOperator shiftExpr)*
    ;

shiftExpr
    : additiveExpr (shiftOperator additiveExpr)*
    ;

shiftOperator
    : '<<'
    | '>>'
    ;

additiveExpr
    : multiplicativeExpr (additiveOperator mutiplicativeExpr)*
    ;

additiveOperator
    : '+'
    | '-'
    ;

mutiplicativeExpr
    : unaryExpr (multiplicativeOperator unaryExpr)*
    ;

mutliplicativeOperator
    : '*'
    | '/'
    | '%'
    ;

unaryExpr
    : primary selector*
    ;

selector
    : assignableSelector
    | arguments
    ;


newStatement
    : 'new' IDENTIFIER arguments?
    ;
// primary
primary
    : 'self'
    | 'super'
    | 'null'
    | 'true'
    | 'false'
    | NUMBER
    | HEX_NUMBER
    | STRING
    | mapLiteral
    | setLiteral
    | IDENTIFIER
    | '(' expression ')'
    ;

arguments
    : '(' argumentList? ')'
    ;

argumentList
    : expression (',' expression)*
    ;
assignableSelector
    : '.'IDENTIFIER
    | '[' expression ']'
    ;

setLiteral
    :'[' expressionList? ']'
    ;

mapLiteral
    : '{' mapLiteralItems? '}'
    ;

mapLiteralItems
    : mapLiteralItem (',' mapLiteralItem)*
    ;

mapLiteralItem
    : IDENTIFIER':' expression
    | STRING ':' expression
    | NUMBER ':' expression
    | HEX_NUMBER ':' expression
    ;

